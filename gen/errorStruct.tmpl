{{$varlen := len .Vars}}
type {{ .ErrName }} struct {
  err error
  op string
  traits map[grr.Trait]string

  {{- range .Vars }}
  {{ .Name }} {{ .Type }}
  {{- end }}
}

var _ grr.Error = &{{ .ErrName }}{}

func New{{ .ErrName }}({{ range $i, $pair := .Vars }}{{ $pair.Name }} {{ $pair.Type }}{{ if notlast $i $varlen}}, {{ end }}{{ end }}) grr.Error {
  return &{{ .ErrName }}{
    {{- range .Vars }}
    {{ .Name }}: {{ .Name }},
    {{- end }}
  }
}

func (e *{{ .ErrName }}) Error() string {
  return fmt.Sprintf("{{ .Message }}", {{ range $i, $pair := .Vars }}e.{{ $pair.Name }}{{ if notlast $i $varlen}}, {{ end }}{{ end }})
}

func (e *{{ .ErrName }}) Unwrap() error {
  return e.err
}

func (e *{{ .ErrName }}) UnwrapAll() error {
	return grr.UnwrapAll(e)
}

func (e *{{ .ErrName }}) AsGrr(err grr.Error) (grr.Error, bool) {
	return grr.AsGrr(e, err)
}

func (e *{{ .ErrName }}) AddTrait(trait grr.Trait, value string) grr.Error {
  e.traits[trait] = value
  return e
}

func (e *{{ .ErrName }}) GetTrait(key grr.Trait) (string, bool) {
	trait, ok := e.traits[key]
	return trait, ok
}

func (e *{{ .ErrName }}) GetTraits() map[grr.Trait]string {
	traits := make(map[grr.Trait]string)
	for k, v := range e.traits {
		traits[k] = v
	}
	return traits
}

func (e *{{ .ErrName }}) AddOp(op string) grr.Error {
  e.op = op
  return e
}

func (e *{{ .ErrName }}) GetOp() string {
  return e.op
}

func (e *{{ .ErrName }}) AddError(err error) grr.Error {
  e.err = err
  return e
}

func (e *{{ .ErrName }}) Trace() {
	grr.Trace(e)
}
